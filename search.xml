<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[创建对象的方式]]></title>
    <url>%2F2016%2F03%2F12%2F%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[一、字面量方式创建对象 示例代码： var book1 = { name:"声名狼藉者的生活", price:42.00, author:"福柯", press:"北京大学出版社", read:function () { console.log("我的书名为:声名狼藉者的的生活,作者为福柯...."); } }; 存在的问题： 1、代码复用性差2、如果要创建大量的同类型对象，则产生大量重复性代码，代码冗余度高 二、内置构造函数创建对象 JS中的内置构造函数： String Number Boolean 注意：(区别于string number boolean) Date Array Function Object RegExp 示例代码： var book1 = new Object(); book1.name = "声名狼藉者的生活"; book1.price = 42.00; book1.author = "福柯"; book1.press = "北京大学出版社"; book1.read = function () { console.log("我的书名为:声名狼藉者的的生活,作者为福柯...."); }; 存在的问题： 1、同样代码复用性差，也无法传参2、创建大量的同类型对象，则产生大量重复性代码，代码冗余度高 三、工厂函数创建对象 示例代码: function createBookNew (name,price,author,press) { var book = new Object(); book.name = name; book.price = price; book.author = author; book.press = press; book.read = function () { console.log("我的书名为:"+book.name+",作者为"+book.author+"...."); }; return book; } //使用工厂函数来创建对象 var book1 = createBookNew("声名狼藉者的的生活","42.00","福柯","北京大学出版社"); var book2 = createBookNew("人性的枷锁","49.00","毛姆","华东师范大学出版社"); var book3 = createBookNew("悟空传","28.00","今何在","湖南文艺出版社"); //打印对象的属性,调用对象的方法 console.log(book1.name); console.log(book2.name); console.log(book3.name); book1.read(); book2.read(); book3.read(); 工厂函数说明： 1、工厂函数方式创建对象其本质是对内置构造函数创建对象的过程进行了封装，把固定不变的部分封装起来，变化的部分提取为函数的参数。 2、使用的场景：大规模“批量生产”同类型的对象。 比喻说明： function createBook (name,price,author,press) { //001 参数 = 原料 var book = new Object(); //002 创建对象并设置对象的属性和方法 = 对原料进行加工 book.name = name; book.price = price; book.author = author; book.press = press; book.read = function () { console.log("我的书名为:"+book.name+",作者为"+book.author+"...."); }; //003 把处理好的对象返回给我们 == 产品出厂 return book; } 存在的问题： 无法识别对象的类型，因为它们的类型都Object 四、自定义构造函数创建对象 //构造函数： function CreateBook (name,price,author,press) { //设置属性、方法： this.name = name; this.price = price; this.author = author; this.press = press; this.read = function () { console.log("我的书名为:"+this.name+",作者为"+this.author+"...."); }; } //实例化 var b1 = new CreateBook("声名狼藉者的的生活","42.00","福柯","北京大学出版社"); var b2 = new CreateBook("人性的枷锁","49.00","毛姆","华东师范大学出版社"); var b3 = new CreateBook("悟空传","28.00","今何在","湖南文艺出版社"); //打印对象的属性,并调用对象的方法测试 console.log(b1.author); console.log(b2.author); console.log(b3.author); b1.read(); b2.read(); b3.read(); 构造函数的执行过程： //01 使用new关键字创建对象, 系统自动创建对象 var obj = new Object(); //02 把新创建的对象赋值给this this = obj; //03 设置新创建对象的原型对象为构造函数的原型对象 obj.proto = CreateBook.prototype; //04 设置新创建对象的构造函数为当前的构造函数 obj.constructor = CreateBook; //默认把新创建的对象返回 return this; 构造函数的返回值return注意点： 1、如果在构造函数中没有手动的return,则默认返回的是新创建出来的对象。2、如果在构造函数中手动的return,则依照具体的情况处理： 2.1 return 的是其他对象(非this/默认创建的对象),则直接返回该对象,取而代之本该默认返回的新对象 2.2 return 的是null或基本数据类型值,则返回新创建的对象(this) 存在的问题： 每次创建对象都会调用构造函数，那么如果创建的对象数量很多,而对象方法内部的实现一模一样,就没必要每个对象都拥有各自属性、方法，不然就造成了资源浪费]]></content>
      <categories>
        <category>javaScript</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[面向对象的概念及三大特效]]></title>
    <url>%2F2016%2F03%2F11%2F%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%A6%82%E5%BF%B5%E5%8F%8A%E4%B8%89%E5%A4%A7%E7%89%B9%E6%95%88%2F</url>
    <content type="text"><![CDATA[一、面向过程和面向对象编程 1.1 面向对象编程和面向过程编程都是一种编程思想。 1.2 面向过程编程和面向对象编程的主要区别： 面向过程编程: 关注点在于解决问题需要的每一个详细的步骤 示例: 自己洗衣服的过程: ① 收集需要洗的脏衣服 ② 准备洗衣粉、洗衣液等 ③ 把衣服放到一个盆里 ④ 接水 ⑤ 把洗衣粉放到盆里 ⑥ 摩擦,摩擦,不断的摩擦 ⑦ 把洗好的衣服用清水冲洗干净 ⑧ 尽量把把洗好的衣服的水分拧干 ⑨ 晾晒 面向对象编程: 关注点在于解决问题需要的对象身上 示例: 使用洗衣机洗衣服的过程: ① 收集需要洗的脏衣服 ② 找到合适的洗衣机 ③ 设定洗衣服和烘干的程序 1.3 面向过程和面向对象他们的区别就类似于自己洗衣服和使用洗衣机洗衣服|自己做饭吃和去餐馆吃饭 。 二、面向对象编程的相关概念 2.1 对象： 什么是对象? 所有的一切都是对象,在开发中有一项重要的工作就是对象的划分 一般来说,我们所指的对象是某个具体的事物,而非泛泛的类别 。 2.2 对象的特征(静态描述信息) 所谓特征就是一些特定的描述信息 如:学生(性别、年龄、班级、专业、籍贯、家庭住址) 如:汽车(颜色、车牌、品牌、价格等) 2.3 对象的行为(动态特性) 如:人(吃饭、睡觉、玩游戏、奔跑、运动等) 如:狗(吃、睡、咬人、叫、流口水) 2.4 js中的对象 键-值对(key-value)的集合 2.5 现实生活中的对象和js对象的对应关系 静态的描述信息 - js对象中的属性(属性就是定义在对象内部的变量) 动态的行为特征 - js对象中的方法(方法就是定义在对象内部的函数) 2.6 代码示例： 123456789101112131415161718192021222324252627var zhangsan = &#123; name:&quot;张三&quot;, sex:&quot;男&quot;, age:18, address:&quot;广州&quot;, eat:function () &#123; console.log(&apos;能吃&apos;); &#125;, sleep:function () &#123; console.log(&quot;能睡&quot;); &#125;, say:function () &#123; console.log(&quot;能说话&quot;); &#125;, run:function () &#123; console.log(&quot;能运动&quot;); &#125;, song:function () &#123; console.log(&quot;能唱歌&quot;); &#125; &#125;; //打印对象的属性并调用相关的方法 console.log(zhangsan.name,zhangsan.age,zhangsan.address); zhangsan.say(); zhangsan.sleep(); 三、面向对象的三大特性面向对象的三大特性:封装、继承、多态 3.1 封装:复用|信息隐蔽 代码示例： //01 封装的简单说明 //001 观察以下杂乱无关的语句,它们仅仅只是一堆无意义的全局变量 var name = "乘风波浪"; var actors = ["彭于晏","赵丽颖","邓超","李荣浩"]; var showTime = "2017-1-28 - 2017-2-28"; var director = "韩寒"; var type = "喜剧"; var play = function () { console.log("播放......"); }; //002 把上面的变量封装到对象中(更具体&有意义) var film = { name:"乘风破浪", actors:["彭于晏","赵丽颖","邓超","李荣浩"], showTime:"2017-1-28 - 2017-2-28", director:"韩寒", type:"喜剧", play:function () { console.log("播放......"); } } 3.2 继承: 获取已经存在的对象已有属性和方法的一种方式(获取他人已有财富和资源的一种方式)。 代码示例 //继承的简单示例 //001 创建一个空的对象 var nullObj = {}; // 上面的对象film拥有了很多的属性和方法 //002 设法让nullObj拥有film中所有的属性和方法 //方法一:自己重新写一遍 //方法二:通过某种方式来获得,比如遍历该对象,然后完成赋值 for(var k in film) { nullObj[k] = film[k]; } for(var k in nullObj) { console.log(nullObj[k]); } 3.3 多态(polymorphism): 多态:polymorphism = poly(复数) + morph(形态) + ism 多用于强类型语言中,JavaScript具备与生俱来的多态特性。 多态表现为: ① 同一操作,作用于不同的对象,会产生不同的解释和行为。 ② 隐藏不同。]]></content>
      <categories>
        <category>javaScript</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新开博客写点东西！]]></title>
    <url>%2F2016%2F03%2F06%2F%E6%96%B0%E5%BC%80%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95%E4%B8%8B%EF%BC%81%2F</url>
    <content type="text"><![CDATA[平时浏览技术文章时，看到的文章经常都是写博客上，有一些写在自己花钱买的域名和空间搭建的博客而且也做得非常好看。之前一直都有这个想法，搭建一个属于自己的博客，如果在博客平台写的笔记有点寄人篱下感觉，所以，还是自己动手搭建一下。也趁着今天是周末，也没什么事情不用出门赶紧把这个事给了结。 之所以选择Hexo程序搭建博客，因为之前在别人博客看一下技术文章，当时的博客主题就我现在选择这个Next，这种风格我个人比较喜欢，比较简洁。另外也说下搭建博客原因，首先，主要是做了前端开发，那么这门技术发展、更新的很快，平时学到一些技术，包括一些好的文章，整理好写成笔记放到博客里，到时有些技术点时间长了也没怎么用到，到时再看会自己整理的一些文章、笔记，那么复习起来也比较容易。 暂时没什么东西放就先放张图片先！]]></content>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
</search>